"""
Django settings for fleebmarket project.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import json
import os
import socket
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.

BASE_DIR = Path(__file__).resolve().parent.parent.parent
ROOT_DIR = BASE_DIR.parent
DATA_DIR = Path(os.environ["DATA_DIR"])


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ["DJANGO_SECRET_KEY"]

# SECURITY WARNING: don't run with debug turned on in production!

ALLOWED_HOSTS = ["127.0.0.1", socket.gethostname(), socket.gethostname() + ".local"]
extra_hosts = os.environ.get("EXTRA_HOSTS")
if extra_hosts:
    ALLOWED_HOSTS.extend(extra_hosts.split(","))


# Application definition

INSTALLED_APPS = [
    "accounts",
    "survey",
    "fleebmarket",
    "search_app",
    "alerts",
    "scrapper",
    # "tasks",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "django.contrib.sitemaps",
    "dbbackup",
    "markdown_deux",
    "pagedown",
    "simpleblog",
    "corsheaders",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.reddit",
    "allauth.socialaccount.providers.discord",
    "django_simple_bulma",
    "django_filters",
    "django_extensions",
]

SITE_ID = 1
MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "fleebmarket.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "overrides" / "allauth_templates",
            BASE_DIR / "templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "survey.context_processors.survey_active",
                "fleebmarket.context_processors.css_classes",
            ],
        },
    },
]


WSGI_APPLICATION = "fleebmarket.wsgi.application"

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"


# USER


AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]


AUTH_USER_MODEL = "accounts.CustomUser"

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# AllAuth


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Etc/UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

STATICFILES_FINDERS = [
    # First add the two default Finders, since this will overwrite the default.
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    # Now add our custom SimpleBulma one.
    "django_simple_bulma.finders.SimpleBulmaFinder",
]

# export location for `collectstatic` command
STATIC_ROOT = DATA_DIR / "static"

MEDIA_URL = "/media/"
# Path where media is stored
MEDIA_ROOT = DATA_DIR / "media/"

BULMA_SETTINGS = {"output_style": "compressed", "extensions": ["bulma-switch"]}


MEILISEARCH = {"host": os.environ["MEILISEARCH_HOST"]}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {name} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "null": {"class": "logging.NullHandler"},
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
}


REDDIT_CREDS = {
    "client_id": os.environ["REDDIT_APP_CLIENT_ID"],
    "secret": os.environ["REDDIT_APP_SECRET"],
    "user_agent": "django:fleebmarket:0.1 (by /u/protoplancton)",
}

DISCORD_CREDS = {
    "client_id": os.environ.get("DISCORD_APP_CLIENT_ID"),
    "secret": os.environ.get("DISCORD_APP_SECRET"),
    "key": os.environ.get("DISCORD_APP_KEY"),
    "bot_token": os.environ.get("DISCORD_BOT_TOKEN"),
}


SOCIALACCOUNT_PROVIDERS = {
    "reddit": {
        "APP": {
            "client_id": REDDIT_CREDS["client_id"],
            "secret": REDDIT_CREDS["secret"],
            "key": "",
        },
        "USER_AGENT": REDDIT_CREDS["user_agent"],
        "AUTH_PARAMS": {"duration": "permanent"},
    },
    "discord": {"APP": DISCORD_CREDS},
}

REDDIT_BOT_CREDS = {
    "client_id": os.environ["REDDIT_BOT_CLIENT_ID"],
    "client_secret": os.environ["REDDIT_BOT_SECRET"],
    "user_agent": os.environ["REDDIT_BOT_USER_AGENT"],
    "username": os.environ["REDDIT_BOT_USERNAME"],
    "password": os.environ["REDDIT_BOT_PASSWORD"],
}


MARKDOWN_DEUX_STYLES = {
    "default": {
        "extras": {
            "code-friendly": None,
            "tables": None,
            "html-classes": {
                "table": "blog-table table is-striped is-bordered is-hoverable",
                "img": "image blog-image",
            },
        },
        "safe_mode": "escape",
    },
}

REACT_BUILD_DIR = BASE_DIR / "static" / "frontend_build"

# Pull the js and css filenames from the current build
with open(REACT_BUILD_DIR / "asset-manifest.json") as f:
    data = json.load(f)

REACT_CSS_PATH = data["files"]["main.css"].replace("static/", "frontend_build/static/")
REACT_JS_PATH = data["files"]["main.js"].replace("static/", "frontend_build/static/")


SCRAPPER = {
    "REDDIT_APP": {
        "client_id": os.environ["REDDIT_APP_CLIENT_ID"],
        "client_secret": os.environ["REDDIT_APP_SECRET"],
    },
    "FETCH_NEW_ADVERTS": {
        "post_limit": 1000,
        "subreddit": "mechmarket",
    },
}

DBBACKUP_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
DBBACKUP_STORAGE_OPTIONS = {
    "default_acl": "private",
    **{
        key.split("S3_")[1].lower(): value
        for key, value in os.environ.items()
        if key.startswith("S3_")
    },
}
